-- üîß CORRE√á√ÉO RLS: Resolver Recurs√£o Infinita nas Pol√≠ticas Admin
-- Execute este script no SQL Editor do Supabase

-- ====================================
-- 1. VERIFICAR PROBLEMA ATUAL
-- ====================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE 'üö® PROBLEMA IDENTIFICADO: Recurs√£o Infinita nas Pol√≠ticas RLS';
  RAISE NOTICE 'üîç Causa: Pol√≠ticas admin consultam profiles para verificar is_admin';
  RAISE NOTICE 'üîÑ Solu√ß√£o: Usar fun√ß√£o RPC ou pol√≠tica mais simples';
  RAISE NOTICE '';
END $$;

-- ====================================
-- 2. REMOVER POL√çTICAS PROBLEM√ÅTICAS
-- ====================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE 'üîß REMOVENDO POL√çTICAS PROBLEM√ÅTICAS...';
  RAISE NOTICE '';
END $$;

-- Remover todas as pol√≠ticas existentes que causam recurs√£o
DROP POLICY IF EXISTS "Admins can view all profiles" ON profiles;
DROP POLICY IF EXISTS "Admins can update all profiles" ON profiles;
DROP POLICY IF EXISTS "Users can view public profiles" ON profiles;
DROP POLICY IF EXISTS "Users can view own profile" ON profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
DROP POLICY IF EXISTS "Enable automatic profile creation" ON profiles;

-- ====================================
-- 3. CRIAR FUN√á√ÉO RPC PARA VERIFICAR ADMIN
-- ====================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE 'üîß CRIANDO FUN√á√ÉO RPC PARA VERIFICAR ADMIN...';
  RAISE NOTICE '';
END $$;

-- Fun√ß√£o para verificar se um usu√°rio √© admin (sem recurs√£o)
CREATE OR REPLACE FUNCTION is_user_admin(user_id UUID)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  admin_status BOOLEAN;
BEGIN
  -- Buscar status admin diretamente (sem RLS)
  SELECT is_admin INTO admin_status
  FROM profiles
  WHERE id = user_id;
  
  RETURN COALESCE(admin_status, false);
END;
$$;

-- ====================================
-- 4. CRIAR POL√çTICAS RLS CORRETAS
-- ====================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE 'üîß CRIANDO POL√çTICAS RLS CORRETAS...';
  RAISE NOTICE '';
END $$;

-- POL√çTICA 1: Permitir cria√ß√£o autom√°tica de perfis (para trigger)
CREATE POLICY "Enable automatic profile creation"
ON profiles
FOR INSERT
TO authenticated
WITH CHECK (true);

-- POL√çTICA 2: Permitir que usu√°rios vejam perfis p√∫blicos
CREATE POLICY "Users can view public profiles"
ON profiles
FOR SELECT
TO authenticated
USING (is_public = true);

-- POL√çTICA 3: Permitir que usu√°rios vejam seu pr√≥prio perfil
CREATE POLICY "Users can view own profile"
ON profiles
FOR SELECT
TO authenticated
USING (auth.uid() = id);

-- POL√çTICA 4: Permitir que usu√°rios atualizem seu pr√≥prio perfil
CREATE POLICY "Users can update own profile"
ON profiles
FOR UPDATE
TO authenticated
USING (auth.uid() = id)
WITH CHECK (auth.uid() = id);

-- POL√çTICA 5: Permitir que admins vejam TODOS os perfis (usando fun√ß√£o RPC)
CREATE POLICY "Admins can view all profiles"
ON profiles
FOR SELECT
TO authenticated
USING (is_user_admin(auth.uid()));

-- POL√çTICA 6: Permitir que admins atualizem TODOS os perfis (usando fun√ß√£o RPC)
CREATE POLICY "Admins can update all profiles"
ON profiles
FOR UPDATE
TO authenticated
USING (is_user_admin(auth.uid()))
WITH CHECK (is_user_admin(auth.uid()));

-- ====================================
-- 5. VERIFICAR SE A COLUNA IS_ADMIN EXISTE
-- ====================================

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'profiles' 
    AND column_name = 'is_admin'
  ) THEN
    RAISE NOTICE '‚ö†Ô∏è Coluna is_admin n√£o existe. Criando...';
    ALTER TABLE profiles ADD COLUMN is_admin BOOLEAN DEFAULT false;
    RAISE NOTICE '‚úÖ Coluna is_admin criada com sucesso';
  ELSE
    RAISE NOTICE '‚úÖ Coluna is_admin j√° existe';
  END IF;
END $$;

-- ====================================
-- 6. CRIAR √çNDICE PARA PERFORMANCE
-- ====================================

CREATE INDEX IF NOT EXISTS idx_profiles_is_admin ON profiles(is_admin);

-- ====================================
-- 7. TESTAR FUN√á√ÉO RPC
-- ====================================

DO $$
DECLARE
  test_user_id UUID;
  admin_status BOOLEAN;
BEGIN
  -- Pegar um usu√°rio existente para teste
  SELECT id INTO test_user_id FROM profiles LIMIT 1;
  
  IF test_user_id IS NOT NULL THEN
    RAISE NOTICE '‚úÖ Usu√°rio de teste encontrado: %', test_user_id;
    
    -- Testar fun√ß√£o RPC
    SELECT is_user_admin(test_user_id) INTO admin_status;
    RAISE NOTICE 'üîç Status admin do usu√°rio: %', admin_status;
    
    -- Se n√£o for admin, tornar admin para teste
    IF NOT admin_status THEN
      UPDATE profiles SET is_admin = true WHERE id = test_user_id;
      RAISE NOTICE 'üëë Usu√°rio configurado como admin para teste';
      
      -- Verificar novamente
      SELECT is_user_admin(test_user_id) INTO admin_status;
      RAISE NOTICE 'üîç Status admin ap√≥s configura√ß√£o: %', admin_status;
    END IF;
  ELSE
    RAISE NOTICE '‚ö†Ô∏è Nenhum usu√°rio encontrado para teste';
  END IF;
END $$;

-- ====================================
-- 8. VERIFICA√á√ïES FINAIS
-- ====================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE 'üîç VERIFICANDO POL√çTICAS CRIADAS...';
  RAISE NOTICE '';
END $$;

-- Verificar pol√≠ticas criadas
SELECT 
  policyname,
  cmd,
  permissive,
  roles,
  qual,
  with_check
FROM pg_policies 
WHERE tablename = 'profiles'
ORDER BY policyname;

-- Verificar se a coluna is_admin foi criada
SELECT column_name, data_type, is_nullable, column_default
FROM information_schema.columns 
WHERE table_name = 'profiles' 
AND column_name = 'is_admin';

-- Verificar se o √≠ndice foi criado
SELECT indexname, indexdef 
FROM pg_indexes 
WHERE tablename = 'profiles' 
AND indexname = 'idx_profiles_is_admin';

-- Verificar se a fun√ß√£o RPC foi criada
SELECT 
  routine_name,
  routine_type,
  data_type,
  security_type
FROM information_schema.routines 
WHERE routine_name = 'is_user_admin';

-- ====================================
-- 9. INSTRU√á√ïES FINAIS
-- ====================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE 'üéâ CORRE√á√ÉO RLS RECURS√ÉO CONCLU√çDA!';
  RAISE NOTICE '';
  RAISE NOTICE '‚úÖ Fun√ß√£o RPC is_user_admin() criada (sem recurs√£o)';
  RAISE NOTICE '‚úÖ Pol√≠ticas RLS corrigidas para evitar loops infinitos';
  RAISE NOTICE '‚úÖ Coluna is_admin verificada/criada';
  RAISE NOTICE '‚úÖ √çndice de performance criado';
  RAISE NOTICE '';
  RAISE NOTICE 'üí° PR√ìXIMOS PASSOS:';
  RAISE NOTICE '   1. Teste a funcionalidade admin no frontend';
  RAISE NOTICE '   2. Verifique se o toggle admin funciona';
  RAISE NOTICE '   3. Confirme que n√£o h√° mais erros 500';
  RAISE NOTICE '';
  RAISE NOTICE 'üîß SE AINDA DER PROBLEMA, verifique:';
  RAISE NOTICE '   - Se a fun√ß√£o RPC is_user_admin() foi criada';
  RAISE NOTICE '   - Se as pol√≠ticas RLS foram aplicadas';
  RAISE NOTICE '   - Logs do Supabase para erros espec√≠ficos';
  RAISE NOTICE '';
END $$;
